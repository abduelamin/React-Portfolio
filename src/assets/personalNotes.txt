Lessons learnt from this project:

1: When making react apps, the root component doesn't take up the whole height and width of the browser. To make it do so you must give it a min-height: 100vh and min-width: 100vw

//

2: When working with images in a React app, you import them into your components and use them as JSX elements. e.g:
import profileImage from "./profile.jpg"; 
<img src={profileImage} alt="Profile" />

//

3: When you use target="_blank" to open links in a new tab or window, it's generally a good practice to include rel="noopener noreferrer" for security and privacy reasons. This is especially important when linking to external websites.

//

4: Nested paths - the child paths must have an absoulte path i.e. you must inclde the parent route as a prefix to the child path 
e.g. <Route path="/ProjectGallery" element={<ProjectGallery />}>
          <Route
            path="/ProjectGallery/Project/:id"
            element={<Project projectsObject={projects} />}
          />
        </Route>

// 

5: inside the parent route component you learnt that we can use shorthand url in the navlink i.e.  to='project/SunnySolar' 
However as you may find that this can lead to problems and the routes doesnt work. If you run into this then use absoulte in the navlink to.
It's often a good practice to use absolute paths when navigating between nested routes to avoid any potential issues.

//

6. useParams 'id' can be very useful because I can create an object of objects and give the keys the names of the endpoint. Then I can use id to access the objects. This is very useful for when you have 1 component and want it to have he same features but different content (i.e. products page with fixed price, image and details section but want the values to change).
We then use refer to that object via square notation e.g. products[id]

for example: 
const myProjects = {
    TeamCardGenerator: {
      title: "Team Card Generator",
      deployedLink: "https://example.com/teamcardgenerator",
      
    },
    SunnySolar: {
      title: "Sunny Solar",
      deployedLink: "https://example.com/sunnysolar",
    
    },
    Weatherapp: {
      title: "Weather App",
      deployedLink: "https://example.com/weatherapp",
    }}

     myProjects[id]  -- This will then give you access to that specifc id key. 
    Then use destructuting to make use of the values i.e. const [title, deployedlink] = myProjects[ID]

    FOR THIS TO WORK YOU MUST MAKE SURE THE ENDPOINT IN THE 'PATH' AND 'TO' ARE IDENTICAL TO THE KEY'S IN THE OBJECT OF OBJECTS.


    // 

    7: Step 5 and 6 showed you how to do such thing when you are dealing with small data and you have written in in the app.jsx. However most often than note I will be dealong with large data e.g. imagine im making and ecommerce app. that will have 50 products. I can't go product by product like I did in the step 5/6. (I cant manaully write all the navlinks etc..) therefore we store our data in a json file. 



